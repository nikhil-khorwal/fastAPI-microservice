version: '3.9'

services:

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    restart: always
    ports:
     - "2181:2181"
     
  kafka:
    image: wurstmeister/kafka
    restart: always
    ports:
     - "9092:9092"
    expose:
     - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "topic_test:1:1"
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock

  product_service:
    build: 
      context: ./Product
    restart: always
    ports:
      - "8000:8000"
    command: >
      sh -c "python main.py"
    volumes:
      - ./Product/app:/app
    environment:
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      - db
      - zookeeper
      - kafka
      # zookeeper:
      #   condition: service_healthy
      # kafka:
      #   condition: service_healthy
      # db:
      #   condition: service_healthy
      
  order_service:
    build: 
      context: ./Order
    restart: always
    ports:
      - "8001:8001"
    command: >
      sh -c "python main.py"
    volumes:
      - ./Order/app:/app
    environment:
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      - db
      - zookeeper
      - kafka
      # zookeeper:
      #   condition: service_healthy
      # kafka:
      #   condition: service_healthy
      # db:
      #   condition: service_healthy
      
  db:
    image: postgres
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
    expose:
      - 5432
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
      
 

volumes:
  postgres-data: